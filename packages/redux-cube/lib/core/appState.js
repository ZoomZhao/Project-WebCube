import { createStore, combineReducers, applyMiddleware, compose } from 'redux';

// https://www.npmjs.com/package/redux-thunk
import thunkMiddleware from 'redux-thunk';
// https://www.npmjs.com/package/redux-debounced
import createDebounce from 'redux-debounced';
// https://www.npmjs.com/package/redux-promise-middleware
import promiseMiddleware from 'redux-promise-middleware';
// https://www.npmjs.com/package/redux-observable
import { combineEpics, createEpicMiddleware } from 'redux-observable';
// https://www.npmjs.com/package/topologically-combine-reducers
import topologicallyCombineReducers from 'topologically-combine-reducers';

const isProdEnv = process.env.NODE_ENV === 'production';
let composeWithDevTools, freezeMiddleware, logger, createLogger;
if (isProdEnv) {
  // https://medium.com/@zalmoxis/using-redux-devtools-in-production-4c5b56c5600f
  ({
    composeWithDevTools,
  } = require('redux-devtools-extension/logOnlyInProduction'));
} else {
  // https://github.com/zalmoxisus/redux-devtools-extension#13-use-redux-devtools-extension-package-from-npm
  ({ composeWithDevTools } = require('redux-devtools-extension'));
  // https://github.com/leoasis/redux-immutable-state-invariant
  freezeMiddleware = require('redux-immutable-state-invariant').default();
  // https://www.npmjs.com/package/redux-logger
  const reduxLogger = require('redux-logger');
  logger = reduxLogger.default;
  ({ createLogger } = reduxLogger);
}

function autoWrapperReducer(state = '') {
  return state;
}

export default function appState({
  // https://redux.js.org/docs/recipes/reducers/UsingCombineReducers.html
  // https://redux.js.org/docs/recipes/reducers/ReusingReducerLogic.html
  reducers: originReducers = {},
  // optional
  // https://www.npmjs.com/package/topologically-combine-reducers
  reducerDeps = null,
  // optional
  // https://redux-observable.js.org/docs/basics/Epics.html
  epics = [],
  // optional
  disableDevTools = false,
  // optional
  // https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md
  devToolsOptions = {},
  // optional
  disableFreezeState = false,
  // optional
  // https://www.npmjs.com/package/topologically-combine-reducers
  enableTopologic = false,
  // optional
  // https://www.npmjs.com/package/redux-logger#options
  loggerConfig = null,
  // optional
  // https://redux.js.org/docs/recipes/reducers/InitializingState.html
  preloadedState,
  // optional
  // https://redux.js.org/docs/advanced/Middleware.html
  // https://redux.js.org/docs/api/applyMiddleware.html
  middlewares = [],
  // optional
  priorMiddlewares = [],
  // optional
  // https://redux.js.org/docs/Glossary.html#store-enhancer
  enhancers = [],
  // optional
  priorEnhancers = [],
  ...autoGenerated
}) {
  const {
    // withRouter
    _enableRouter = false,
    _routerReducer,
    _routerMiddleware,
    _routerHistory,
    // withRouter3
    _enableRouter3 = false,
    // withPersist
    _enablePersist = false,
    _persistStorage,
    _persistKey,
    _persistConfig,
    _persistStore,
    _persistCombineReducers,
    // withImmutable
    _enableImmutable = false,
    _immutableCombineReducers,
  } = autoGenerated;
  const reducers = Object.assign(
    {},
    originReducers,
    // https://github.com/ReactTraining/react-router/tree/master/packages/react-router-redux#usage
    (_enableRouter && { router: _routerReducer }) ||
      // https://github.com/reactjs/react-router-redux#routerreducer
      (_enableRouter3 && { routing: _routerReducer }) ||
      {},
  );
  let canWeEnableImmutableJS = _enableImmutable;
  if (_enableImmutable && (_enablePersist || enableTopologic)) {
    canWeEnableImmutableJS = false;
    console.warn(
      '[redux-cube] Wrong appState settings. `withImmutable` is automatically disabled because you have enabled other feature conflict with ImmutableJS data',
    );
  }
  let rootReducer;
  if (canWeEnableImmutableJS) {
    // https://www.npmjs.com/package/redux-immutable
    // https://redux.js.org/docs/recipes/UsingImmutableJS.html#make-your-entire-redux-state-tree-an-immutablejs-object
    rootReducer = _immutableCombineReducers(reducers);
  } else if (enableTopologic) {
    // https://www.npmjs.com/package/topologically-combine-reducers
    rootReducer = topologicallyCombineReducers(reducers, reducerDeps);
  } else {
    // https://redux.js.org/docs/api/combineReducers.html
    rootReducer = combineReducers(reducers);
  }
  if (_enablePersist) {
    // https://github.com/rt2zz/redux-persist#usage
    rootReducer = _persistCombineReducers(
      _persistConfig || {
        key: _persistKey,
        storage: _persistStorage,
      },
      {
        persist: rootReducer,
        _autoWrapper: autoWrapperReducer,
      },
    );
  }
  // https://redux.js.org/docs/api/applyMiddleware.html
  const middlewaresToApply = [
    ...priorMiddlewares,
    createDebounce(),
    // https://github.com/pburtchaell/redux-promise-middleware/blob/4c6282e54c41034591d8925fe29457b472b04e69/docs/introduction.md
    // https://github.com/pburtchaell/redux-promise-middleware/blob/4c6282e54c41034591d8925fe29457b472b04e69/docs/guides/custom-suffixes.md
    // https://github.com/pburtchaell/redux-promise-middleware/blob/4c6282e54c41034591d8925fe29457b472b04e69/docs/guides/custom-separators.md
    promiseMiddleware(),
    // https://www.npmjs.com/package/redux-thunk#injecting-a-custom-argument
    thunkMiddleware,
    // https://redux-observable.js.org/docs/basics/SettingUpTheMiddleware.html
    createEpicMiddleware(combineEpics(...epics)),
    ...middlewares,
  ]
    .concat(
      isProdEnv || disableFreezeState
        ? []
        : [
            // https://github.com/leoasis/redux-immutable-state-invariant#immutablestateinvariantmiddleware-isimmutable-ignore-
            freezeMiddleware,
          ],
    )
    .concat(
      _enableRouter || _enableRouter3
        ? [
            // https://github.com/reacttraining/react-router/tree/master/packages/react-router-redux#usage
            // https://github.com/reactjs/react-router-redux#what-if-i-want-to-issue-navigation-events-via-redux-actions
            _routerMiddleware(_routerHistory),
          ]
        : [],
    )
    .concat(
      isProdEnv
        ? []
        : [
            // https://www.npmjs.com/package/redux-logger
            // logger must be the last middleware in chain
            loggerConfig ? createLogger(loggerConfig) : logger,
          ],
    );
  // https://redux.js.org/docs/api/compose.html
  // https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup
  const allEnhancers = (disableDevTools
    ? compose
    : composeWithDevTools(devToolsOptions))(
    ...priorEnhancers,
    applyMiddleware(...middlewaresToApply),
    ...enhancers,
  );
  const initialState = _enablePersist
    ? {
        persist: preloadedState || {},
        _autoWrapper: 'persist',
      }
    : preloadedState || {};
  return {
    create() {
      const res = {};
      // https://redux.js.org/docs/api/createStore.html
      // https://redux.js.org/docs/api/Store.html
      res.store = createStore(rootReducer, initialState, allEnhancers);
      if (_enablePersist) {
        // https://github.com/rt2zz/redux-persist#usage
        res.persistor = _persistStore(res.store);
      }
      return res;
    },
  };
}
